---
apiVersion: v1
kind: Namespace
metadata:
  name: cockpit
  labels:
    name: cockpit
    app: cockpit-automacao
    version: "1.0.2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cockpit-automacao
  namespace: cockpit
  labels:
    app: cockpit-automacao
    component: frontend
    version: "1.0.2"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cockpit-automacao
      component: frontend
  template:
    metadata:
      labels:
        app: cockpit-automacao
        component: frontend
        version: "1.0.2"
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
      - name: cockpit-app
        image: cockpit-app:1.0.2
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        env:
        - name: VITE_AWX_API
          value: "http://192.168.15.52:8080"
        - name: VITE_CACHE_DASHBOARD_STATS_TTL
          value: "5"
        - name: VITE_CACHE_MONTHLY_DATA_TTL
          value: "1440"
        - name: VITE_LOG_LEVEL
          value: "info"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 101  # nginx user
          runAsGroup: 101
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-pid
          mountPath: /var/run
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-pid
        emptyDir: {}
      securityContext:
        fsGroup: 101
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: cockpit-service
  namespace: cockpit
  labels:
    app: cockpit-automacao
    component: frontend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: cockpit-automacao
    component: frontend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cockpit-ingress
  namespace: cockpit
  labels:
    app: cockpit-automacao
    component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
spec:
  rules:
  - host: cockpit.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cockpit-service
            port:
              number: 80
  # Configuração alternativa para acesso via IP (sem domínio)
  - http:
      paths:
      - path: /cockpit
        pathType: Prefix
        backend:
          service:
            name: cockpit-service
            port:
              number: 80