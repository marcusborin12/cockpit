# Script de deploy do Cockpit AWX no K3s para Windows PowerShell
# Este script faz todo o processo: ConfigMap ‚Üí Build ‚Üí Deploy

# Configura√ß√µes
$NAMESPACE = "default"
$CONFIGMAP_NAME = "cockpit-config"
$APP_NAME = "cockpit-awx"
$IMAGE_TAG = "latest"

# Fun√ß√£o para verificar comandos
function Check-Command {
    param($Description)
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ $Description" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro: $Description" -ForegroundColor Red
        exit 1
    }
}

Write-Host "üöÄ Iniciando deploy completo do Cockpit AWX no K3s..." -ForegroundColor Blue

# 1. Aplicar ConfigMap
Write-Host "üìÑ Aplicando ConfigMap..." -ForegroundColor Yellow
kubectl apply -f k8s-configmap.yaml
Check-Command "ConfigMap aplicado"

# 2. Aguardar um momento
Start-Sleep -Seconds 2

# 3. Obter configura√ß√µes do ConfigMap
Write-Host "üîß Obtendo configura√ß√µes do ConfigMap..." -ForegroundColor Yellow
$VITE_AWX_API = kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.VITE_AWX_API}'
$VITE_CACHE_DASHBOARD_STATS_TTL = kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.VITE_CACHE_DASHBOARD_STATS_TTL}'
$VITE_CACHE_MONTHLY_DATA_TTL = kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.VITE_CACHE_MONTHLY_DATA_TTL}'
$VITE_CACHE_RECENT_EXECUTIONS_TTL = kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.VITE_CACHE_RECENT_EXECUTIONS_TTL}'
$VITE_CACHE_VERSION = kubectl get configmap $CONFIGMAP_NAME -n $NAMESPACE -o jsonpath='{.data.VITE_CACHE_VERSION}'

Write-Host "üîó Configura√ß√µes extra√≠das:" -ForegroundColor Green
Write-Host "  VITE_AWX_API: $VITE_AWX_API"
Write-Host "  VITE_CACHE_VERSION: $VITE_CACHE_VERSION"

# 4. Build da imagem Docker
Write-Host "üê≥ Construindo imagem Docker..." -ForegroundColor Yellow
docker build `
  --build-arg VITE_AWX_API="$VITE_AWX_API" `
  --build-arg VITE_CACHE_DASHBOARD_STATS_TTL="$VITE_CACHE_DASHBOARD_STATS_TTL" `
  --build-arg VITE_CACHE_MONTHLY_DATA_TTL="$VITE_CACHE_MONTHLY_DATA_TTL" `
  --build-arg VITE_CACHE_RECENT_EXECUTIONS_TTL="$VITE_CACHE_RECENT_EXECUTIONS_TTL" `
  --build-arg VITE_CACHE_VERSION="$VITE_CACHE_VERSION" `
  -t "${APP_NAME}:${IMAGE_TAG}" .
Check-Command "Imagem Docker constru√≠da"

# 5. Importar imagem no K3s
Write-Host "üì¶ Importando imagem no K3s..." -ForegroundColor Yellow
docker save "${APP_NAME}:${IMAGE_TAG}" | k3s ctr images import -
Check-Command "Imagem importada no K3s"

# 6. Aplicar deployment
Write-Host "üö¢ Aplicando deployment..." -ForegroundColor Yellow
kubectl apply -f k8s-deployment.yaml
Check-Command "Deployment aplicado"

# 7. Aguardar pods ficarem prontos
Write-Host "‚è≥ Aguardando pods ficarem prontos..." -ForegroundColor Yellow
kubectl wait --for=condition=ready pod -l app=$APP_NAME --timeout=300s
Check-Command "Pods prontos"

# 8. Mostrar status
Write-Host "üìä Status do deployment:" -ForegroundColor Yellow
kubectl get pods -l app=$APP_NAME -o wide
Write-Host ""
kubectl get services cockpit-awx-service

# 9. Mostrar como acessar
Write-Host "üåê Para acessar a aplica√ß√£o:" -ForegroundColor Green
Write-Host "kubectl port-forward service/cockpit-awx-service 8080:80" -ForegroundColor Blue
Write-Host "Em seguida acesse: http://localhost:8080" -ForegroundColor Yellow

Write-Host "‚úÖ Deploy conclu√≠do com sucesso!" -ForegroundColor Green

# 10. Opcional: Fazer port-forward automaticamente
$response = Read-Host "Deseja fazer port-forward automaticamente? (y/N)"
if ($response -eq "y" -or $response -eq "Y") {
    Write-Host "üîó Iniciando port-forward..." -ForegroundColor Blue
    Write-Host "Acesse: http://localhost:8080" -ForegroundColor Yellow
    Write-Host "Pressione Ctrl+C para parar" -ForegroundColor Yellow
    kubectl port-forward service/cockpit-awx-service 8080:80
}