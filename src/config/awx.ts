// Configura√ß√£o para integra√ß√£o (simplificada)
export const AWX_CONFIG = {
  // URL base (usa proxy em desenvolvimento para evitar CORS)
  BASE_URL: import.meta.env.DEV 
    ? '/api' 
    : `${import.meta.env.VITE_PORTAL_BASE_URL}/api/v2`,
  
  // Timeout para requisi√ß√µes (em milissegundos)
  TIMEOUT: 30000,
  
  // Headers padr√£o para requisi√ß√µes
  DEFAULT_HEADERS: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  
  // Endpoints da API do AWX
  ENDPOINTS: {
    // Jobs (com barra final - importante para o AWX)
    JOBS: '/jobs/',
    JOB_TEMPLATES: '/job_templates/',
    JOB_LAUNCHES: '/job_templates/{id}/launch/',
    
    // Execu√ß√µes/Jobs executados
    JOB_EXECUTIONS: '/jobs/',
    JOB_EXECUTION_DETAIL: '/jobs/{id}/',
    JOB_EXECUTION_STDOUT: '/jobs/{id}/stdout/',
    
    // Invent√°rios
    INVENTORIES: '/inventories/',
    HOSTS: '/hosts/',
    
    // Projetos
    PROJECTS: '/projects/',
    
    // Organiza√ß√µes
    ORGANIZATIONS: '/organizations/',
    
    // Credenciais
    CREDENTIALS: '/credentials/',
    
    // Usu√°rios
    USERS: '/users/',
    ME: '/me/',
    
    // Estat√≠sticas do Dashboard
    DASHBOARD_JOBS_GRAPH: '/dashboard/graphs/jobs/',
    ACTIVITY_STREAM: '/activity_stream/',
  },
  
  // Status dos jobs no AWX
  JOB_STATUS: {
    NEW: 'new' as const,
    PENDING: 'pending' as const, 
    WAITING: 'waiting' as const,
    RUNNING: 'running' as const,
    SUCCESSFUL: 'successful' as const,
    FAILED: 'failed' as const,
    ERROR: 'error' as const,
    CANCELED: 'canceled' as const,
  },
  
  // Mapeamento de status para nossa aplica√ß√£o
  STATUS_MAPPING: {
    successful: 'success',
    failed: 'failed',
    error: 'failed',
    canceled: 'failed',
    running: 'running',
    pending: 'running',
    waiting: 'running',
    new: 'running',
  } as const,
  
  // Configura√ß√µes de pagina√ß√£o
  PAGINATION: {
    DEFAULT_PAGE_SIZE: 200,
    MAX_PAGE_SIZE: 200,
  },
  
  // Intervalos de atualiza√ß√£o (em milissegundos)
  REFRESH_INTERVALS: {
    DASHBOARD_STATS: 30000, // 30 seconds
    JOB_EXECUTIONS: 10000,  // 10 seconds
    RUNNING_JOBS: 5000,     // 5 seconds
  },
};

// Tipos TypeScript para AWX
export interface AWXJob {
  id: number;
  name: string;
  description: string;
  status: 'new' | 'pending' | 'waiting' | 'running' | 'successful' | 'failed' | 'error' | 'canceled';
  created: string;
  modified: string;
  started: string | null;
  finished: string | null;
  elapsed: number;
  job_template: number;
  job_template_name?: string;
  inventory: number;
  inventory_name?: string;
  project: number;
  project_name?: string;
  playbook: string;
  failed: boolean;
  result_traceback: string;
}

export interface AWXJobTemplate {
  id: number;
  name: string;
  description: string;
  job_type: 'run' | 'check';
  inventory: number;
  project: number;
  playbook: string;
  created: string;
  modified: string;
  last_job_run?: string;
  last_job_failed?: boolean;
  next_job_run?: string;
  status: string;
}

export interface AWXApiResponse<T> {
  count: number;
  next: string | null;
  previous: string | null;
  results: T[];
}

export interface AWXDashboardStats {
  jobs: {
    successful: number;
    failed: number;
    total: number;
    running: number;
  };
  hosts: {
    total: number;
    failed: number;
    unreachable: number;
  };
  inventories: {
    total: number;
    inventory_failed: number;
    inventories_total: number;
  };
  projects: {
    total: number;
    failed: number;
  };
}

// Fun√ß√£o helper para construir URLs
export const buildAwxUrl = (endpoint: string, params?: Record<string, string | number>) => {
  const baseUrl = AWX_CONFIG.BASE_URL;
  
  // Se o endpoint j√° √© uma URL completa (para casos especiais), usa ela diretamente
  if (endpoint.includes(baseUrl)) {
    return endpoint;
  }
  
  // Remove "/" inicial do endpoint se existir, pois baseUrl j√° termina com "/"
  const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;
  
  // Constr√≥i a URL normalmente
  let url = `${baseUrl}/${cleanEndpoint}`;
  
  // Substitui par√¢metros como {id}
  if (params) {
    Object.entries(params).forEach(([key, value]) => {
      url = url.replace(`{${key}}`, String(value));
    });
  }
  
  console.log('üîó Building URL:', { baseUrl, endpoint, cleanEndpoint, finalUrl: url });
  return url;
};

// Fun√ß√£o helper para obter token de autentica√ß√£o
export const getAwxAuthHeaders = () => {
  const token = import.meta.env.VITE_PORTAL_TOKEN || localStorage.getItem('portal_token');
  
  if (!token) {
    throw new Error('Token n√£o encontrado. Configure VITE_PORTAL_TOKEN ou fa√ßa login.');
  }
  
  return {
    ...AWX_CONFIG.DEFAULT_HEADERS,
    'Authorization': `Bearer ${token}`,
  };
};